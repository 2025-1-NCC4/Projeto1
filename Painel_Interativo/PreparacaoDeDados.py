# -*- coding: utf-8 -*-
"""Entrega02 - Ciência de Dados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16l40m04cIwTq84SV3mlPk_zMu2O_kycw
"""

#Instruções de Entrega: Arquivo do COLAB com os scripts
#Objetivo: PREPARAR OS DADOS
#Selecionar os Dados
#Limpar/ Uniformizar os dados
#Derivar dados
#Integrar os Dados
#Formatar os Dados

import pandas as pd
from bcb import sgs

#Selecionando Dados
def carregar_dados():
  dfSelic = sgs.get({'Selic': 1178}, start='2020-01-01')
  dfSelic = pd.DataFrame(dfSelic)

  dfIpca = sgs.get({'Ipca': 4449}, start='2020-01-01')
  dfIpca = pd.DataFrame(dfIpca)

  dfSMin = sgs.get({'Salario_Minimo': 1619}, start='2020-01-01')
  dfSMin = pd.DataFrame(dfSMin)

  dfIgpm = sgs.get({'Igpm': 189}, start='2020-01-01')
  dfIgpm = pd.DataFrame(dfIgpm)

  dfInad = sgs.get({'Inadimplencia': 21082}, start='2020-01-01')
  dfInad = pd.DataFrame(dfInad)

  #Apresentando os dados
  print(dfSelic.tail())
  print(dfIpca.tail())
  print(dfSMin.tail())
  print(dfIgpm.tail())
  print(dfInad.tail())

  #limpando dados
  def verifica_nulo(df):
    return print(df.isnull().sum())

  verifica_nulo(dfIpca)
  verifica_nulo(dfIgpm)
  verifica_nulo(dfInad)
  verifica_nulo(dfSMin)
  verifica_nulo(dfSelic)


  #Transformando o index em coluna


  def ajusteColunas(df, coluna_valor):
    df = df.reset_index()

    if df.columns[0] != 'Data':
        df = df.rename(columns={df.columns[0]: 'Data'})

    df = df.rename(columns={df.columns[1]: coluna_valor})
    return df


  dfSelic = ajusteColunas(dfSelic, 'Selic')
  dfIpca = ajusteColunas(dfIpca, 'Ipca')
  dfSMin = ajusteColunas(dfSMin, 'Salario_Minimo')
  dfIgpm = ajusteColunas(dfIgpm, 'Igpm')
  dfInad = ajusteColunas(dfInad, 'Inadimplencia')

  #Apresentando os dados

  print(dfSelic.tail())

  #Melhorando a apresentação das datas
  def ajusteData(df):
    df['Data'] = df['Data'].dt.strftime('%d/%m/%Y')
    return df

  dfSelic = ajusteData(dfSelic)
  dfIpca = ajusteData(dfIpca)
  dfSMin = ajusteData(dfSMin)
  dfIgpm = ajusteData(dfIgpm)
  dfInad = ajusteData(dfInad)

  #Transformando a taxa selic em um grafico mensal (atualmente está diario)
  dfSelic['Data'] = pd.to_datetime(dfSelic['Data'], dayfirst=True)
  dfSelic = dfSelic.set_index('Data')
  dfSelic_mensal = dfSelic.resample('MS').first().reset_index()
  dfSelic = dfSelic_mensal

  dfSelic = ajusteData(dfSelic)

  #Apresentando os dados
  print(dfSelic.tail())
  print(dfIpca.tail())
  print(dfSMin.tail())
  print(dfIgpm.tail())
  print(dfInad.tail())

  #Derivando dados

  #Adicionando variação nos indices
  def variacao(df, coluna_valor):
    df['Variação'] = df[coluna_valor].pct_change() * 100
    return df

  dfSelic = variacao(dfSelic, 'Selic')
  dfIpca = variacao(dfIpca, 'Ipca')
  dfSMin = variacao(dfSMin, 'Salario_Minimo')
  dfIgpm = variacao(dfIgpm, 'Igpm')
  dfInad = variacao(dfInad, 'Inadimplencia')

  #Apresentando os dados
  print(dfSelic.tail())
  print(dfIpca.tail())
  print(dfSMin.tail())
  print(dfIgpm.tail())
  print(dfInad.tail())

  #Deixando os nomes das variações unicos

  dfSelic = dfSelic.rename(columns={'Variação': 'Variacao_Selic'})
  dfIpca = dfIpca.rename(columns={'Variação': 'Variacao_Ipca'})
  dfSMin = dfSMin.rename(columns={'Variação': 'Variacao_Salario'})
  dfIgpm = dfIgpm.rename(columns={'Variação': 'Variacao_Igpm'})
  dfInad = dfInad.rename(columns={'Variação': 'Variacao_Inad'})

  #Integrando dados pelas datas
  df_geral = dfSelic.merge(dfIpca, on='Data', how='inner')\
                    .merge(dfSMin, on='Data', how='inner')\
                    .merge(dfIgpm, on='Data', how='inner')\
                    .merge(dfInad, on='Data', how='inner')

  #criando comparações com os indicadores

  #Salario minimo corrigido pela inflação, indicada no ipca
  df_geral['Salario_Real'] = df_geral['Salario_Minimo'] / (1 + df_geral['Ipca'] / 100)
  #Comparação entre o igpm e o ipca
  df_geral['Diferenca_Inflacao'] = df_geral['Igpm'] - df_geral['Ipca']

  df_indicadores = df_geral[['Data', 'Salario_Real', 'Diferenca_Inflacao']]
  print(df_indicadores.tail())

  #Formatar dados

  #Arredondando as colunas de variação para dois digitos após a vírgula
  def arredondarColuna(df, nome_coluna, casas_decimais=2):
      df[nome_coluna] = df[nome_coluna].round(casas_decimais)
      return df

  df_indicadores = arredondarColuna(df_indicadores, 'Salario_Real')
  df_indicadores = arredondarColuna(df_indicadores, 'Diferenca_Inflacao')
  dfSelic = arredondarColuna(dfSelic, 'Variacao_Selic')
  dfIpca = arredondarColuna(dfIpca, 'Variacao_Ipca')
  dfSMin = arredondarColuna(dfSMin, 'Variacao_Salario')
  dfIgpm = arredondarColuna(dfIgpm, 'Variacao_Igpm')
  dfInad = arredondarColuna(dfInad, 'Variacao_Inad')


  print(dfSelic.tail())
  print(dfIpca.tail())
  print(dfSMin.tail())
  print(dfIgpm.tail())
  print(dfInad.tail())
  print(df_indicadores.tail())
  return dfSelic, dfIpca, dfSMin, dfIgpm, dfInad, df_indicadores

print(carregar_dados())